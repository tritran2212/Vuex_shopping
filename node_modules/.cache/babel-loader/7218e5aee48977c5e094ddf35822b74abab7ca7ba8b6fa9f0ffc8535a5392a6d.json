{"ast":null,"code":"import { mapState, mapGetters, mapActions } from 'vuex';\nexport default {\n  // Nhận id từ router\n  props: ['id'],\n  computed: {\n    // Lấy 'status' từ state của module products\n    ...mapState('products', ['status']),\n    // Lấy product từ store bằng getter.\n    // Đây là \"nguồn dữ liệu duy nhất\", không cần dùng data() nữa.\n    product() {\n      // Dùng Number() để đảm bảo id được so sánh đúng kiểu dữ liệu\n      return this.$store.getters['products/getProductById'](Number(this.id));\n    }\n  },\n  methods: {\n    // Lấy action 'addProductToCart' từ module cart\n    ...mapActions('cart', ['addProductToCart']),\n    handleAddToCart() {\n      // Luôn đảm bảo 'this.product' tồn tại trước khi thêm\n      if (this.product) {\n        this.addProductToCart(this.product);\n        alert('Đã thêm vào giỏ hàng!');\n      }\n    },\n    // Hàm này đảm bảo dữ liệu sản phẩm đã được tải\n    async ensureDataIsLoaded() {\n      // Chỉ gọi API nếu danh sách sản phẩm trong store đang rỗng\n      if (this.$store.state.products.all.length === 0) {\n        // Dispatch action và đợi nó hoàn thành\n        await this.$store.dispatch('products/fetchAll');\n      }\n    }\n  },\n  // Dùng created hook để tải dữ liệu khi component được tạo\n  async created() {\n    await this.ensureDataIsLoaded();\n  },\n  // Watch rất quan trọng khi điều hướng giữa các trang chi tiết khác nhau\n  // mà không rời khỏi component (ví dụ: từ product/1 sang product/2)\n  watch: {\n    '$route.params.id': 'ensureDataIsLoaded'\n  }\n};","map":{"version":3,"names":["mapState","mapGetters","mapActions","props","computed","product","$store","getters","Number","id","methods","handleAddToCart","addProductToCart","alert","ensureDataIsLoaded","state","products","all","length","dispatch","created","watch"],"sources":["src/views/ProductDetailView.vue"],"sourcesContent":["<template>\r\n  <div class=\"product-detail-view\">\r\n    <div v-if=\"status === 'loading' && !product\" class=\"loading-message\">\r\n      Đang tải chi tiết sản phẩm...\r\n    </div>\r\n\r\n    <div v-else-if=\"status === 'error'\" class=\"error-message\">\r\n      Không thể tải sản phẩm. Vui lòng thử lại.\r\n    </div>\r\n\r\n    <div v-else-if=\"product\" class=\"product-content\">\r\n      <img :src=\"product.image\" :alt=\"product.title\" class=\"product-image\" />\r\n      <div class=\"product-info\">\r\n        <h1>{{ product.title }}</h1>\r\n        <p class=\"category\">{{ product.category }}</p>\r\n        <p class=\"price\">${{ product.price }}</p>\r\n        <p class=\"description\">{{ product.description }}</p>\r\n        <button @click=\"handleAddToCart\" class=\"add-to-cart-btn\">Thêm vào giỏ hàng</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapActions } from 'vuex';\r\n\r\nexport default {\r\n  // Nhận id từ router\r\n  props: ['id'],\r\n\r\n  computed: {\r\n    // Lấy 'status' từ state của module products\r\n    ...mapState('products', ['status']),\r\n\r\n    // Lấy product từ store bằng getter.\r\n    // Đây là \"nguồn dữ liệu duy nhất\", không cần dùng data() nữa.\r\n    product() {\r\n      // Dùng Number() để đảm bảo id được so sánh đúng kiểu dữ liệu\r\n      return this.$store.getters['products/getProductById'](Number(this.id));\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    // Lấy action 'addProductToCart' từ module cart\r\n    ...mapActions('cart', ['addProductToCart']),\r\n\r\n    handleAddToCart() {\r\n      // Luôn đảm bảo 'this.product' tồn tại trước khi thêm\r\n      if (this.product) {\r\n        this.addProductToCart(this.product);\r\n        alert('Đã thêm vào giỏ hàng!');\r\n      }\r\n    },\r\n\r\n    // Hàm này đảm bảo dữ liệu sản phẩm đã được tải\r\n    async ensureDataIsLoaded() {\r\n      // Chỉ gọi API nếu danh sách sản phẩm trong store đang rỗng\r\n      if (this.$store.state.products.all.length === 0) {\r\n        // Dispatch action và đợi nó hoàn thành\r\n        await this.$store.dispatch('products/fetchAll');\r\n      }\r\n    },\r\n  },\r\n\r\n  // Dùng created hook để tải dữ liệu khi component được tạo\r\n  async created() {\r\n    await this.ensureDataIsLoaded();\r\n  },\r\n\r\n  // Watch rất quan trọng khi điều hướng giữa các trang chi tiết khác nhau\r\n  // mà không rời khỏi component (ví dụ: từ product/1 sang product/2)\r\n  watch: {\r\n    '$route.params.id': 'ensureDataIsLoaded',\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.product-detail-view { padding: 2rem; max-width: 1000px; margin: auto; }\r\n.product-content { display: grid; grid-template-columns: 1fr 2fr; gap: 2rem; }\r\n.product-image { max-width: 100%; border: 1px solid #eee; padding: 1rem; border-radius: 8px; }\r\n.category { text-transform: capitalize; color: #777; }\r\n.price { font-size: 2rem; font-weight: bold; color: #42b983; }\r\n.add-to-cart-btn { background: #42b983; color: white; border: none; padding: 1rem 2rem; cursor: pointer; font-size: 1rem; border-radius: 5px; transition: background-color 0.2s; }\r\n.add-to-cart-btn:hover { background-color: #36a46e; }\r\n.loading-message, .error-message { text-align: center; font-size: 1.2rem; padding: 3rem; color: #777; }\r\n</style>"],"mappings":"AAwBA,SAAAA,QAAA,EAAAC,UAAA,EAAAC,UAAA;AAEA;EACA;EACAC,KAAA;EAEAC,QAAA;IACA;IACA,GAAAJ,QAAA;IAEA;IACA;IACAK,QAAA;MACA;MACA,YAAAC,MAAA,CAAAC,OAAA,4BAAAC,MAAA,MAAAC,EAAA;IACA;EACA;EAEAC,OAAA;IACA;IACA,GAAAR,UAAA;IAEAS,gBAAA;MACA;MACA,SAAAN,OAAA;QACA,KAAAO,gBAAA,MAAAP,OAAA;QACAQ,KAAA;MACA;IACA;IAEA;IACA,MAAAC,mBAAA;MACA;MACA,SAAAR,MAAA,CAAAS,KAAA,CAAAC,QAAA,CAAAC,GAAA,CAAAC,MAAA;QACA;QACA,WAAAZ,MAAA,CAAAa,QAAA;MACA;IACA;EACA;EAEA;EACA,MAAAC,QAAA;IACA,WAAAN,kBAAA;EACA;EAEA;EACA;EACAO,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}